//
//  ProfileViewController.swift
//  hone
//

import UIKit
import Firebase

class ProfileViewController: UIViewController, UITableViewDelegate, UITableViewDataSource,UINavigationControllerDelegate /*UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout */{

    var user : User?
    var picView : UIImageView!
    fileprivate var userName:UILabel!
    var image :UIImage!
    fileprivate var school: UILabel!
    fileprivate var education: UILabel!
    fileprivate var location: UILabel!
    //---
    fileprivate var favorites: UILabel!
    fileprivate var recents :UILabel!
    //---
    //Container of the three
    var container: UIView?
    var containerTwo: UIView?
    var containerThree: UIView?
    
    var firstContainerTwo : UIView?
    var secondContainerTwo : UIView?
    var thirdContainerTwo : UIView?
    
    var tableView: UITableView  =   UITableView()
    var items: [String] = ["Edit Profile", "Courses", "Settings" ,  "Help and Support"]
    var imgIt:[String] = ["path","path","path", "path"]
    var imageView: UIImageView!
    //---
    fileprivate var memberSince: UILabel!
    fileprivate var lastAppt: UILabel!
    fileprivate var nextAppt: UILabel!
    
    var settingsImage: UIImageView!
    
    var imgFavFirst : UIImageView!
    var imgFavSec : UIImageView!
    var imgFavThird : UIImageView!

    
    
    
  
//    var collectionView = UICollectionView()
//    let collectionViewIdentifier = "collectionViewCell"
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
//        view.backgroundColor = UIColor(white: 1, alpha: 0.5 )
        
   
        setNavBar()
        
        
        
        //        setting the container views function
        setContainerViews()
        /*
            //        setting the information that needs to be passed from the query
        let layout: UICollectionViewFlowLayout = UICollectionViewFlowLayout()
        layout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        layout.itemSize = CGSize(width: 90, height: (containerTwo?.frame.height)!)
        collectionView = UICollectionView(frame: (self.containerTwo?.frame)!, collectionViewLayout: layout)
        self.collectionView.dataSource = self
        self.collectionView.delegate = self
        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "CollectionViewCell")
        collectionView.backgroundColor = UIColor.red
        self.containerTwo?.addSubview(collectionView)
        
*/
        setInformation()
        
        
        
        // user information set
        print( "here \(user?.firstName)")
        view.backgroundColor = UIColor.white
    }
    
   /*
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        // handle tap events
        print("You selected cell #\(indexPath.item)!")
    }
    

    
    // this is the cell of the collection returning initialized with the SessionsInfo
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: collectionViewIdentifier, for:indexPath) as UICollectionViewCell
        if collectionView == collectionView {
         
            return cell
        }else{
        
            return cell
        }
    }

    // return of the number per item per section
     func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 2
    }
    
    //size collrect view
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 40 , height: (self.containerTwo?.frame.height)!)
    }
    */
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.items.count
    }
    
    // Setting up table view text and icon
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell(style: UITableViewCellStyle.subtitle, reuseIdentifier: "myCell")
        
        cell.textLabel?.text = self.items[indexPath.row]
        cell.preservesSuperviewLayoutMargins = false
        cell.separatorInset = UIEdgeInsets.zero
        cell.layoutMargins = UIEdgeInsets.zero
        
        //cell.textLabel?.font = UIFont(name:"BrandonGrotesque-Light", size: 8)
        cell.textLabel?.font = UIFont.systemFont(ofSize: 12)
        cell.imageView?.image = UIImage(named:self.imgIt[indexPath.row])
        return cell
    }
    //selection for table View
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let indexPath = tableView.indexPathForSelectedRow
        
        let currentCell = tableView.cellForRow(at: indexPath!)! as UITableViewCell
        let cellName = currentCell.textLabel!.text
        
        
        
        if ("Edit Profile" == cellName){
            print("here")
            let editProfileViewControl = editProfileView()
            navigationController?.pushViewController(editProfileViewControl, animated: true)

        } else if ("Courses" == cellName){
            let coursesSetViewControl = coursesSettings()
            navigationController?.pushViewController(coursesSetViewControl, animated: true)


        }
        else if ("Settings" == cellName){
            let profileSettingsControl = profileSettings()
            navigationController?.pushViewController(profileSettingsControl, animated: true)
            
        }
        else if("Help and Support" == cellName){
            
        }
        
    }
    
    
    
    override func viewDidAppear(_ animated: Bool) {
        self.tableView = UITableView(frame: self.containerThree!.bounds,style: UITableViewStyle.plain)
        

        
        self.tableView.delegate = self
        self.tableView.dataSource = self
        
        
        //
        tableView.translatesAutoresizingMaskIntoConstraints = false
        self.containerThree!.addSubview(tableView)
        self.tableView.rowHeight = 40
        
        
        
        //NSLayoutConstraint.constraintsWithVisualFormat("H:|[v0]|", options: NSLayoutFormatOptions(), metrics: nil, views: ["v0" : self.tableView])
        //
        //NSLayoutConstraint.constraintsWithVisualFormat("V:|[v0]|", options: NSLayoutFormatOptions(), metrics: nil, views: ["v0" : self.tableView])
        
    }
    
    
    
    fileprivate func setNavBar() ->Void{
        navigationController?.navigationBar.isTranslucent = true
        navigationController?.navigationBar.tintColor = UIColor.init(white: 0.9, alpha: 0.5)
        navigationController?.navigationBar.contentMode = .scaleAspectFit
        
        
        navigationItem.leftBarButtonItem?.tintColor = UIColor.honePalette.accent
        navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "plus") , style: .plain, target: self, action: nil)
        navigationItem.rightBarButtonItem?.tintColor = UIColor.honePalette.accent
        
        navigationItem.title = "Joe Schmoe";
        navigationController!.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName: UIColor.honePalette.blue_green,NSFontAttributeName: UIFont(name: "BrandonGrotesque-Regular", size: 20)!]
        
        navigationController?.isNavigationBarHidden = false
    }
    
    fileprivate func setContainerViews()-> Void{
        //First Container
        let container : UIView = UIView()
        
        container.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(container)
//        let heightTop = UIApplication.shared.statusBarFrame.size.height
        container.topAnchor.constraint(equalTo: view.topAnchor,constant: (navigationController?.navigationBar.frame.height)! ).isActive = true
//         container.topAnchor.constraint(equalTo: view.topAnchor,constant:(navigationController?.navigationBar.
        container.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
//        container.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.40).isActive = true
        container.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.40).isActive = true
        container.widthAnchor.constraint(equalTo: view.widthAnchor).isActive =  true
        self.container = container
//        view.layoutIfNeeded()
//        addBorder(optionView:container,edge: UIRectEdge.bottom, color: UIColor.black, thickness: 4)
        
        print(" BIGGG: ", container.frame.width)
        print(" VIEW: ", view.frame.height)
        print(" SMALL: ", container.frame.height)
        
 
        //Second Container
        let containerTwo : UIView = UIView()
        containerTwo.backgroundColor = UIColor.white
        containerTwo.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(containerTwo)
        containerTwo.topAnchor.constraint(equalTo: container.bottomAnchor,constant: 0).isActive = true
        containerTwo.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        containerTwo.heightAnchor.constraint(equalTo: container.heightAnchor, multiplier: 0.35).isActive = true
        containerTwo.widthAnchor.constraint(equalTo: container.widthAnchor).isActive =  true
        self.containerTwo = containerTwo
        view.layoutIfNeeded()
//        addBorder(optionView:containerTwo,edge: UIRectEdge.bottom, color: UIColor.lightGray, thickness: 4)
      
        
        
       
        
//        let firstContainerTwo : UIView = UIView(frame:CGRect(x: 0, y: 0, width: (containerTwo.frame.width/3), height: (containerTwo.frame.height)))
//        firstContainerTwo.backgroundColor = UIColor.white
//        firstContainerTwo.translatesAutoresizingMaskIntoConstraints = false
//        containerTwo.addSubview(firstContainerTwo)
//        self.firstContainerTwo = firstContainerTwo
//        containerTwo.layoutIfNeeded()
//        addBorder(optionView:firstContainerTwo,edge: UIRectEdge.right, color: UIColor.black, thickness: 1)
//        view.layoutSubviews()
//        addBorder(optionView:firstContainerTwo,edge: UIRectEdge.bottom, color: UIColor.black, thickness: 1)
//        addBorder(optionView:firstContainerTwo,edge: UIRectEdge.top, color: UIColor.black, thickness: 1)
//        
//        
////        containerTwo.layoutIfNeeded()
////        addBorder(optionView: firstContainerTwo, edge: UIRectEdge.right, color: UIColor.black, thickness: 1)
////        
//        
//        let secondContainerTwo : UIView = UIView(frame:CGRect(x: 125, y: 0, width: (containerTwo.frame.width/3), height: (containerTwo.frame.height)))
//        secondContainerTwo.backgroundColor = UIColor.white
//        containerTwo.addSubview(secondContainerTwo)
//        self.firstContainerTwo = secondContainerTwo
//        containerTwo.layoutIfNeeded()
//        addBorder(optionView:secondContainerTwo,edge: UIRectEdge.right, color: UIColor.black, thickness: 1)
//        view.layoutSubviews()
//        addBorder(optionView:secondContainerTwo,edge: UIRectEdge.bottom, color: UIColor.black, thickness: 1)
//        addBorder(optionView:secondContainerTwo,edge: UIRectEdge.top, color: UIColor.black, thickness: 1)
////        addBorder(optionView:secondContainerTwo,edge: UIRectEdge.bottom, color: UIColor.black, thickness: 1)
////        containerTwo.layoutIfNeeded()
////        addBorder(optionView: secondContainerTwo, edge: UIRectEdge.right, color: UIColor.black, thickness: 1)
//        
//        let thirdContainerTwo : UIView = UIView(frame:CGRect(x: 250, y: 0, width: (containerTwo.frame.width/3), height: (containerTwo.frame.height)))
//        thirdContainerTwo.backgroundColor = UIColor.white
//        containerTwo.addSubview(thirdContainerTwo)
//        self.thirdContainerTwo = thirdContainerTwo
//        containerTwo.layoutIfNeeded()
//        addBorder(optionView:thirdContainerTwo,edge: UIRectEdge.bottom, color: UIColor.black, thickness: 1)
//        view.layoutSubviews()
//        addBorder(optionView:thirdContainerTwo,edge: UIRectEdge.top, color: UIColor.black, thickness: 1)

        
        // Third Container
        let containerThree : UIView = UIView()
        containerThree.backgroundColor = UIColor.white
        containerThree.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(containerThree)
        containerThree.topAnchor.constraint(equalTo: containerTwo.bottomAnchor,constant: 0).isActive = true
        containerThree.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        containerThree.heightAnchor.constraint(equalTo: container.heightAnchor).isActive = true
        containerThree.widthAnchor.constraint(equalTo: view.widthAnchor).isActive =  true
        self.containerThree = containerThree
        
 
    }

    fileprivate func setInformation()->Void{
        
        
        let obj = self.container
       // let obj2 = self.containerTwo
//        let fc2 = self.firstContainerTwo
        
        
        //-----------------------favorites------------------
      /*  favorites = UILabel()
        favorites.text = "favorites"// name of the text get from the query
        favorites.font = UIFont.italicSystemFont(ofSize: 12)
        favorites.textColor = UIColor.white
        favorites.translatesAutoresizingMaskIntoConstraints = false
        self.container!.addSubview(favorites)
        favorites.trailingAnchor.constraint(equalTo: (self.container?.trailingAnchor)!, constant: -55).isActive = true
        favorites.topAnchor.constraint(equalTo: self.container!.topAnchor,constant: 30).isActive=true
        let tap = UITapGestureRecognizer(target: self, action: #selector(setFavorites))
        favorites.addGestureRecognizer(tap)
        favorites.isUserInteractionEnabled = true
        //-----------------------recents------------------
        recents = UILabel()
        recents.text = "recents"// name of the text get from the query
        recents.font = UIFont(name:"Brandon Grotesque", size: 12)
        recents.font = UIFont.italicSystemFont(ofSize: 12)
        recents.textColor = UIColor.white
        recents.translatesAutoresizingMaskIntoConstraints = false
        recents.addConstraint(NSLayoutConstraint())
        self.container!.addSubview(recents)
        recents.trailingAnchor.constraint(equalTo: (self.container?.trailingAnchor)!, constant: -55).isActive = true
        //recents.centerXAnchor.constraintEqualToAnchor(self.container., constant: 20).active = true
        recents.topAnchor.constraint(equalTo: self.container!.topAnchor, constant: 140).isActive=true */
/**************************FIRST CONTAINER*****************************/
        //blur
        let sampleImageView = UIImageView(frame: CGRect(x: 0, y: 0, width: (container?.frame.width)!, height: (container?.frame.height)!))
        let sampleImage:UIImage = UIImage(named: "pic.jpg")!
        sampleImageView.image =  sampleImage
        
        //Convert To Blur Image Here
        if #available(iOS 10.0, *) {
            sampleImageView.makeBlurImage(targetImageView: sampleImageView, effect: UIBlurEffectStyle.light)
        } else {
            sampleImageView.makeBlurImage(targetImageView: sampleImageView, effect: UIBlurEffectStyle.dark)
        }
        
        self.container?.addSubview(sampleImageView)
        
        //-----------------------profilePic------------------
        image = UIImage(named: "pic.jpg")
        //let backImage: UIImage? = #imageLiteral(resourceName: "logo")
        picView = UIImageView(frame: CGRect(x: 0, y: 0, width: 90, height: 90))
        picView.image =  image
        picView.layer.cornerRadius = picView.frame.size.height/2
        picView.layer.borderWidth = 1.5
//        picView.layer.borderColor = UIColor.init(white: 0, alpha: 0.0).cgColor
        picView.layer.borderColor = UIColor.honePalette.blue_green.cgColor
        picView.clipsToBounds = true
        picView.translatesAutoresizingMaskIntoConstraints = false
        self.container!.addSubview(picView)
        picView.centerXAnchor.constraint(equalTo: self.container!.centerXAnchor).isActive = true
        picView.topAnchor.constraint(equalTo: self.container!.topAnchor, constant: 50).isActive = true
        
        
       /* //-----------------------Name------------------
        userName = UILabel()
        userName.text = "Joe Schmoe"
        userName.font = UIFont(name:"BrandonGrotesque-Regular", size: 18)
        //userName.font = UIFont.boldSystemFontOfSize(12)
        userName.textColor = UIColor.honePalette.blue_green
        userName.translatesAutoresizingMaskIntoConstraints = false
        self.container?.addSubview(userName)
        userName.topAnchor.constraint(equalTo: self.picView.bottomAnchor, constant: 5).isActive = true
        userName.centerXAnchor.constraint(equalTo: self.picView.centerXAnchor).isActive = true */
        
        //----------------------Location ----------------
        location = UILabel()
        location.text = "Pawtucket, Rhode Island"
        location.font = UIFont(name:"BrandonGrotesque-Regular", size: 12)
        //userName.font = UIFont.boldSystemFontOfSize(12)
        location.textColor = UIColor.honePalette.blue_green
        location.translatesAutoresizingMaskIntoConstraints = false
        self.container?.addSubview(location)
        location.topAnchor.constraint(equalTo: self.picView.bottomAnchor, constant: 1).isActive = true
        location.centerXAnchor.constraint(equalTo: self.picView.centerXAnchor).isActive = true
        
        //-----------------------School------------------
        school = UILabel()
        school.text = "University of Rhode Island"
//        school.font = UIFont.boldSystemFont(ofSize: 18)
        school.font = UIFont(name:"BrandonGrotesque-Regular", size: 12)
        school.textColor = UIColor.white
        school.translatesAutoresizingMaskIntoConstraints = false
        obj?.addSubview(school)
        school.topAnchor.constraint(equalTo: self.location.bottomAnchor, constant: 1).isActive = true
        school.centerXAnchor.constraint(equalTo: self.picView.centerXAnchor).isActive = true
        //-----------------------Education------------------
        education = UILabel()
        education.text = "Engineering"
        education.font = UIFont(name:"BrandonGrotesque-Regular", size: 12)
        education.textColor = UIColor.white
        education.translatesAutoresizingMaskIntoConstraints = false
        obj?.addSubview(education)
        education.topAnchor.constraint(equalTo: self.school.bottomAnchor, constant: 1).isActive = true
        education.centerXAnchor.constraint(equalTo: self.picView.centerXAnchor).isActive = true
/**************************SECOND CONTAINER*****************************/
        //--------------memberSince-------------------
        memberSince = UILabel()
        memberSince.text = "Member Since:"
        memberSince.font = UIFont(name:"BrandonGrotesque-Regular", size: 10)
        //memberSince.font = UIFont(name:"Brandon_bld",size: 8)
        memberSince.textColor = UIColor.black
        memberSince.translatesAutoresizingMaskIntoConstraints = false
        //self.first2ContainerTwo!.addSubview(memberSince)
//        memberSince.topAnchor.constraint(equalTo: (obj2?.topAnchor)!, constant: 10).isActive = true
//        memberSince.leadingAnchor.constraint(equalTo: (obj2?.leadingAnchor)!,constant: 25).isActive = true
//        fc2?.addSubview(memberSince)
//        memberSince.centerXAnchor.constraint(equalTo: (fc2?.centerXAnchor)!).isActive = true
        /*
        //--------------last Appointment date -------------------
        lastAppt = UILabel()
        lastAppt.text = "Last Appointment:"
        lastAppt.font = UIFont.boldSystemFont(ofSize: 10)
        //memberSince.font = UIFont(name:"Brandon_bld",size: 8)
        lastAppt.textColor = UIColor.black
        lastAppt.translatesAutoresizingMaskIntoConstraints = false
        self.containerThree!.addSubview(lastAppt)
        lastAppt.topAnchor.constraint(equalTo: (obj2?.topAnchor)!, constant: 10).isActive = true
        //
        lastAppt.centerXAnchor.constraint(equalTo: (obj2?.centerXAnchor)!).isActive = true

        
        
        //--------------Next Appointment date -------------------
        nextAppt = UILabel()
        nextAppt.text = "Next Appointment:"
        nextAppt.font = UIFont.boldSystemFont(ofSize: 10)
        //memberSince.font = UIFont(name:"Brandon_bld",size: 8)
        nextAppt.textColor = UIColor.black
        nextAppt.translatesAutoresizingMaskIntoConstraints = false
        self.containerThree!.addSubview(nextAppt)
        nextAppt.topAnchor.constraint(equalTo: (obj2?.topAnchor)!, constant: 10).isActive = true
        //memberSince.centerYAnchor.constraintEqualToAnchor(self.containerTwo!.centerYAnchor).active = true
        nextAppt.leadingAnchor.constraint(equalTo: self.lastAppt.trailingAnchor,constant: 25
).isActive = true
        */
        
    }

    func setFavorites(_ sender:UITapGestureRecognizer){
        let favoriteSetViewControl = UINavigationController(rootViewController: favoriteSetViewController())
        present(favoriteSetViewControl, animated: true, completion: nil)
        
    }
    
    
    ///////////
  
        
//    func drawBottomLine(optionView:UIView){
//        let bottomBorder = CALayer()
//        bottomBorder.frame = CGRect(0.0, optionView.frame.height-1, optionView.frame.width, 1)
//        bottomBorder.backgroundColor = UIColor.red.cgColor
//        optionView.layer.addSublayer(bottomBorder)
//        
//        
//    }
    
    func addBorder(optionView:UIView, edge: UIRectEdge, color: UIColor, thickness: CGFloat) {
        
        let border = CALayer();
        
        switch edge {
        case UIRectEdge.top:
            border.frame = CGRect(x: 0, y: 0, width: optionView.frame.width, height: thickness)
            break
        case UIRectEdge.bottom:
            border.frame = CGRect(x:0, y:optionView.frame.height - thickness, width:optionView.frame.width, height:thickness)
            break
        case UIRectEdge.left:
            border.frame = CGRect(x:0, y:0, width: thickness, height: optionView.frame.height)
            break
        case UIRectEdge.right:
            border.frame = CGRect(x:optionView.frame.width - thickness, y: 0, width: thickness, height:optionView.frame.height)
            break
        default:
            break
        }
        
        border.backgroundColor = color.cgColor;
        
        optionView.layer.addSublayer(border)
    }

    

    
    
    
    
}

    

extension UIImageView{
    
    func makeBlurImage(targetImageView:UIImageView?, effect:UIBlurEffectStyle)
    {
        let blurEffect = UIBlurEffect(style: effect)
        let blurEffectView = UIVisualEffectView(effect: blurEffect)
        blurEffectView.frame = targetImageView!.bounds
        
        blurEffectView.autoresizingMask = [.flexibleWidth, .flexibleHeight] // for supporting device rotation
        targetImageView?.addSubview(blurEffectView)
        
        
        
    }
}







extension CGRect{
    init(_ x:CGFloat,_ y:CGFloat,_ width:CGFloat,_ height:CGFloat) {
        self.init(x:x,y:y,width:width,height:height)
    }
    
}
extension CGSize{
    init(_ width:CGFloat,_ height:CGFloat) {
        self.init(width:width,height:height)
    }
}
extension CGPoint{
    init(_ x:CGFloat,_ y:CGFloat) {
        self.init(x:x,y:y)
    }
}


extension UIColor {
    convenience init(red: Int, green: Int, blue: Int) {
        assert(red >= 0 && red <= 255, "Invalid red component")
        assert(green >= 0 && green <= 255, "Invalid green component")
        assert(blue >= 0 && blue <= 255, "Invalid blue component")
        
        self.init(red: CGFloat(red) / 255.0, green: CGFloat(green) / 255.0, blue: CGFloat(blue) / 255.0, alpha: 1.0)
    }
    
    convenience init(netHex:Int) {
        self.init(red:(netHex >> 16) & 0xff, green:(netHex >> 8) & 0xff, blue:netHex & 0xff)
    }
}
